import networkx as nx
import pandas as pd


def graph_of_net(branch, bus, interconnect):
    """Create the graph for the HIFLD transmission network
    :param dict n_dict: dict of substation's neighbors as the edge inside the Graph
    :return: (*networkx.Graph*) -- Graph generated by networkx.
    """

    graph = nx.Graph()

    for bu in bus.iloc:

        if bu["interconnect"] == interconnect:
            graph.add_node(bu["bus_id"])
    for br in branch.iloc:
        if br["interconnect"] == interconnect:
            graph.add_edge(br["from_bus_id"], br["to_bus_id"], name=branch["to_bus_id"])
    return graph


def get_max_island(graph):
    """Report the largest connected island to understand the topo nature of the graph

    :param networkx.Graph G: Graph generated by :func:`GraphOfNet`
    :return: (*list*) -- list of nodes inside the largest island.
    """

    return set(max(nx.connected_components(graph), key=len))


if __name__ == "__main__":
    buses = pd.read_csv("output/bus.csv")
    branches = pd.read_csv("output/branch.csv")
    sub = pd.read_csv("output/sub.csv")
    bus2sub = pd.read_csv("output/bus2sub.csv")

    # inter = "Western"

    bus_delete = []
    br_delete = []

    graph = graph_of_net(branches, buses, "Western")
    max_island_set = get_max_island(graph)

    # print("Island Detection: number of nodes in graph = ", len(graph.nodes))
    # print("Island Detection: max island size = ", len(max_island_set))
    # print(inter, " islands:")

    for islands in nx.connected_components(graph):
        if len(islands) == len(max_island_set):
            continue
        for node in islands:
            # print(node)
            bus_delete.append(node)

    graph = graph_of_net(branches, buses, "Eastern")
    max_island_set = get_max_island(graph)

    for islands in nx.connected_components(graph):
        if len(islands) == len(max_island_set):
            continue
        for node in islands:
            # print(node)
            bus_delete.append(node)

    graph = graph_of_net(branches, buses, "Texas")
    max_island_set = get_max_island(graph)

    for islands in nx.connected_components(graph):
        if len(islands) == len(max_island_set):
            continue
        for node in islands:
            # print(node)
            bus_delete.append(node)

    for br in branches.iloc:
        if br["from_bus_id"] in bus_delete or br["to_bus_id"] in bus_delete:
            br_delete.append(br["branch_id"])

    buses = buses[-buses.bus_id.isin(bus_delete)]
    branches = branches[-branches.branch_id.isin(br_delete)]
    bus2sub = bus2sub[-bus2sub.bus_id.isin(bus_delete)]
    sub = sub[-sub.sub_id.isin(bus_delete)]

    branches.to_csv("output/branch.csv", index=False)
    buses.to_csv("output/bus.csv", index=False)
    bus2sub.to_csv("output/bus2sub.csv", index=False)
    sub.to_csv("output/sub.csv", index=False)
